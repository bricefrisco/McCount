service: McCount

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  environment:
    TIMESERIES_TABLE_NAME: ${sls:stage}-MCServerTimeseries
    SERVER_REQUESTS_TABLE_NAME: ${sls:stage}-MCServerRequests
    SERVER_DATA_TABLE_NAME: ${sls:stage}-MCServerData
    SQS_QUEUE_URL: https://sqs.${aws:region}.amazonaws.com/${aws:accountId}/${sls:stage}-MCServerPollQueue
    S3_BUCKET_NAME: ${sls:stage}-minecountserverlogos
    CORS_ALLOWED_ORIGINS: '*'
    CORS_ALLOWED_HEADERS: '*'
    CORS_ALLOWED_METHODS: GET, POST, PUT, DELETE, OPTIONS

plugins:
  - serverless-iam-roles-per-function

functions:
  ping:
    handler: src/functions/pinger.ping
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: ping
          method: get
          cors: true

  fetchTimeSeries:
    handler: src/functions/timeSeries.fetchTimeSeries
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerTimeseries
    events:
      - http:
          path: timeseries
          method: get
          cors: true

  createServerRequest:
    handler: src/functions/serverRequests.createServerRequest
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerRequests
    events:
      - http:
          path: server-requests
          method: post
          cors: true

  fetchServerRequests:
    handler: src/functions/serverRequests.fetchServerRequests
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerRequests
          - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerRequests/index/*
    events:
      - http:
          path: server-requests
          method: get
          cors: true

  modifyServerRequest:
    handler: src/functions/serverRequests.modifyServerRequest
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerRequests
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerData
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          - arn:aws:s3:::${sls:stage}-minecountserverlogos
          - arn:aws:s3:::${sls:stage}-minecountserverlogos/*
    events:
      - http:
          path: server-requests
          method: put
          cors: true

  fetchServerRequest:
    handler: src/functions/serverRequests.fetchServerRequest
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerRequests
    events:
      - http:
          path: server-request
          method: get
          cors: true

  fetchServers:
    handler: src/functions/servers.fetchServers
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerData
    events:
      - http:
          path: servers
          method: get
          cors: true

  deleteServer:
    handler: src/functions/servers.deleteServer
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerData
    events:
      - http:
          path: servers
          method: delete
          cors: true

  pingAndSave:
    handler: src/functions/pinger.pingAndSave
    memorySize: 128
    timeout: 90
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerTimeseries
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerData
    events:
      - sqs:
          arn: arn:aws:sqs:${aws:region}:${aws:accountId}:${sls:stage}-MCServerPollQueue

  sqsProducer:
    handler: src/functions/sqsProducer.loadQueue
    memorySize: 128
    timeout: 300
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: arn:aws:sqs:${aws:region}:${aws:accountId}:${sls:stage}-MCServerPollQueue
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${sls:stage}-MCServerData
    events:
      - schedule:
          rate: cron(*/10 * ? * * *)

resources:
  Resources:
    ServerData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-MCServerData
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: players
            AttributeType: N
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: player-count-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
              - AttributeName: players
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ServerRequests:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-MCServerRequests
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: host
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: host
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: status-date-index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ServerTimeseries:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-MCServerTimeseries
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: n
            AttributeType: S
          - AttributeName: t
            AttributeType: N
        KeySchema:
          - AttributeName: n
            KeyType: HASH
          - AttributeName: t
            KeyType: RANGE

    ServerPlayerCountQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${sls:stage}-MCServerPollQueue
        MessageRetentionPeriod: 86400
        VisibilityTimeout: 90

    LogosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${sls:stage}-minecountserverlogos

    LogosBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref LogosBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${sls:stage}-minecountserverlogos/*